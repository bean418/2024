# -*- coding: utf-8 -*-
"""03_polynomialRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ld86cbtPeIKB59xGHj6qH9o6yumQakIg
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

df = pd.read_csv("PolynomialRegressionData.csv")
X = df.iloc[:, :-1].values
y = df.iloc[:, -1].values
df.head()

"""## Simple Linear Regression"""

from sklearn.linear_model import LinearRegression

reg = LinearRegression()
reg.fit(X, y)

"""## Data Visualization"""

plt.scatter(X, y, color = "blue")
plt.plot(X, reg.predict(X), color = "green")
plt.title("Score by hours")
plt.xlabel('hours')
plt.ylabel('score')
plt.show()

reg.score(X, y)

"""## Polynomial Regression"""

from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree = 2)
X_poly = poly_reg.fit_transform(X)
# poly_reg.fit(), poly_reg.transform(X) 을 하나의 코드로

print(X[:5], '\n\n', X_poly[:5])

poly_reg.get_feature_names_out()

reg2 = LinearRegression()
reg2.fit(X_poly, y)

"""## Visualization"""

plt.scatter(X, y, color = "blue", label = "data")
plt.plot(X, reg2.predict(X_poly), color = "red", label = "Poly")
plt.plot(X, reg.predict(X), color = "green", label = "Linear")
plt.title("Score by hours")
plt.xlabel('hours')
plt.ylabel('score')
plt.legend()
plt.show()

X_new = np.arange(min(X), max(X), 0.1)
X_new

X_new.shape # 1차원

X[:5]

X.shape # 2차원

X_new = X_new.reshape(-1, 1) # reshape(row, col) -1은 자동 계산
X_new[:5]

poly_reg = PolynomialFeatures(degree = 4)
X_poly = poly_reg.fit_transform(X)
reg2 = LinearRegression()
reg2.fit(X_poly, y)

def plot():
    plt.scatter(X, y, color = "blue", label = "data")
    plt.plot(X_new, reg2.predict(poly_reg.fit_transform(X_new)), color = "red", label = "Poly")
    plt.plot(X, reg.predict(X), color = "green", label = "Linear")
    plt.title("Score by hours")
    plt.xlabel('hours')
    plt.ylabel('score')
    plt.legend()
    plt.show()

plot()

reg2.score(X_poly, y)

"""## Predict"""

reg.predict([[2]]) # Linear

reg2.predict(poly_reg.fit_transform([[2]])) # Polynomial

poly_reg = PolynomialFeatures(degree = 20)
X_poly = poly_reg.fit_transform(X)
reg2 = LinearRegression()
reg2.fit(X_poly, y)

plot()
# 과대적합 -> 훈련 데이터(족보)를 기반으로 한 분석에서는 예측이 잘 됨.
# 실제 데이터(실제 시험)를 예측할 때는 오차가 클 수 있음.

reg2.score(X_poly, y)